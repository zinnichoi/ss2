package model.report;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.*;
import domainapp.basics.util.Tuple;
import domainapp.basics.util.cache.StateHistory;
import model.bill.Bill;
import model.bill.EquipmentBill;
import model.bill.InternetTimeOrder;
import model.bill.ProductOrder;
import model.people.Staff;
import model.utilityCost.UtilityCost;

import java.util.List;

public class FinanceReport {
    @DAttr(name = "reportId", id = true, auto = true, type = DAttr.Type.String, length = 10, mutable = false, optional = false)
    private String reportId;
    private static int idCounter = 0;

    @DAttr(name = "utilityCosts", type = DAttr.Type.Collection, optional = true,
            serialisable = false, filter = @Select(clazz = UtilityCost.class))
    @DAssoc(ascName = "FinanceReport-has-utilityCosts", role = "financeReport",
            ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.One,
            associate = @DAssoc.Associate(type = UtilityCost.class, cardMin = 0, cardMax = 25))
    private List<UtilityCost> utilityCosts;

    @DAttr(name = "bills", type = DAttr.Type.Collection, optional = true,
            serialisable = false, filter = @Select(clazz = Bill.class))
    @DAssoc(ascName = "FinanceReport-has-bills", role = "financeReport",
            ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.One,
            associate = @DAssoc.Associate(type = Bill.class, cardMin = 0, cardMax = 25))
    private List<Bill> bills;

    @DAttr(name = "salary", type = DAttr.Type.Collection, optional = true,
            serialisable = false, filter = @Select(clazz = Staff.class))
    @DAssoc(ascName = "FinanceReport-has-salary", role = "financeReport",
            ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.One,
            associate = @DAssoc.Associate(type = Staff.class, cardMin = 0, cardMax = 25))
    private List<Staff> salary;

    @DAttr(name="totalCost", type = DAttr.Type.Integer,mutable = true,optional = true,length = 10)
    private Integer totalCost;

    @DAttr(name="totalIncome",type = DAttr.Type.Integer,mutable = true,optional = true,length = 10)
    private Integer totalIncome;

    @DAttr(name = "interestRate",type = DAttr.Type.Integer,mutable = true,optional = true,length = 10)
    private Integer interestRate;


    public FinanceReport(String reportId, List<UtilityCost> utilityCosts, List<Bill> bills, List<Staff> salary, Integer totalCost, Integer totalIncome) {
        this.reportId = nextID(reportId);
        this.utilityCosts = utilityCosts;
        this.bills = bills;
        this.salary = salary;
        this.totalCost = totalCost;
        this.totalIncome = totalIncome;
    }

    public FinanceReport(Integer totalCost, Integer totalIncome) {
        this(null,null,null,null,totalCost,totalIncome);
    }

    public FinanceReport(String reportId, List<UtilityCost> utilityCosts, List<Bill> bills, List<Staff> salary) {
        this(null, utilityCosts,bills, salary,0,0);
    }

    public FinanceReport(String reportId, Integer totalCost, Integer totalIncome) {
        this(null,null,null,null,totalCost,totalIncome);
    }

    public FinanceReport(String reportId) {
        this(null,null,null,null,0,0);
    }

    public FinanceReport() {
        this(null,null,null,null,0,0);
    }

    public FinanceReport(List<UtilityCost> utilityCosts, List<Bill> bills, List<Staff> salary) {
        this(null, utilityCosts, bills, salary,0,0);
    }


    private String nextID(String currId) {
        if (currId == null) {
            idCounter++;
            return "FR" + idCounter;
        } else {
            int num = Integer.parseInt(currId.substring(2));
            if (num > idCounter) {
                idCounter = num;
            }
            return currId;
        }
    }

    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue(
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) throws ConstraintViolationException {

        if (minVal != null && maxVal != null) {
            String maxId = (String) maxVal;
            try {
                int maxIdNum = Integer.parseInt(maxId.substring(2));

                if (maxIdNum > idCounter) // extra check
                    idCounter = maxIdNum;

            } catch (RuntimeException e) {
                throw new ConstraintViolationException(
                        ConstraintViolationException.Code.INVALID_VALUE, e, new Object[]{maxId});
            }
        }
    }

    public String getReportId() {
        return reportId;
    }

    public void setReportId(String reportId) {
        this.reportId = reportId;
    }

    public List<UtilityCost> getUtilityCosts() {
        return utilityCosts;
    }

    public void setUtilityCosts(List<UtilityCost> utilityCosts) {
        this.utilityCosts = utilityCosts;
    }

    public List<Bill> getBills() {
        return bills;
    }

    public void setBills(List<Bill> bills) {
        this.bills = bills;
    }

    public List<Staff> getSalary() {
        return salary;
    }

    public void setSalary(List<Staff> salary) {
        this.salary = salary;
    }

    public Integer getTotalCost() {
        return totalCost;
    }

    public Integer getInterestRate() {
        return interestRate;
    }

    public void setInterestRate(Integer interestRate) {
        if (this.interestRate == null ){
            this.interestRate = interestRate;
        }else {
            this.interestRate += interestRate;
        }

    }

    public void setTotalCost(Integer totalCost) {
        if (this.totalCost == null ){
            this.totalCost = totalCost;
        }else {
            this.totalCost += totalCost;
        }
    }

    public Integer getTotalIncome() {
        return totalIncome;
    }

    public void setTotalIncome(Integer totalIncome) {
        if (this.totalIncome == null ){
            this.totalIncome = totalIncome;
        }else {
            this.totalIncome += totalIncome;
        }
    }

    //bill
    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addBill(Bill bill) {
        if (!bills.contains(bill))
            bills.add(bill);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewBill(Bill bill) {
        bills.add(bill);
        if (bill instanceof InternetTimeOrder){
            this.setTotalIncome(((InternetTimeOrder) bill).getMoney());
        }else if(bill instanceof ProductOrder){
            this.setTotalCost(((ProductOrder) bill).getProduct().getProductCost());
            this.setTotalIncome(((ProductOrder) bill).getProduct().getProductPrice());
        }else{
            this.setTotalCost(((EquipmentBill) bill).getEquipment().getCost());
        }
        return true;
       // return false;
    }

    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addBill(List<Bill> bills) {
        boolean added = false;
        for (Bill bill : bills) {
            if (!this.bills.contains(bill)) {
                if (!added) added = true;
                this.bills.add(bill);
            }
        }
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewBill(List<Bill> bills) {
        this.bills.addAll(bills);
        for (Bill bill : bills) {
            if (bill instanceof InternetTimeOrder){
                this.setTotalIncome(((InternetTimeOrder) bill).getMoney());
            }else if(bill instanceof ProductOrder){
                this.setTotalCost(((ProductOrder) bill).getProduct().getProductCost());
                this.setTotalIncome(((ProductOrder) bill).getProduct().getProductPrice());
            }else{
                this.setTotalCost(((EquipmentBill) bill).getEquipment().getCost());
            }
        }
        return true;
        //return false;
    }

    @DOpt(type = DOpt.Type.LinkRemover)
    public boolean removeBill(Bill bill) {
        boolean removed = this.bills.remove(bill);
        if (bill instanceof InternetTimeOrder){
            this.totalIncome -= ((InternetTimeOrder) bill).getMoney();
        }else if(bill instanceof ProductOrder){
           this.totalIncome -= ((ProductOrder) bill).getProduct().getProductPrice();
            this.totalCost -= ((ProductOrder) bill).getProduct().getProductCost();
        }else{
            this.totalCost -= ((EquipmentBill) bill).getEquipment().getCost();
        }
        return true;
       //
        // return false;
    }

    // utilityCost
    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addUtilityCost(UtilityCost utilityCost) {
        if (!utilityCosts.contains(utilityCost))
            utilityCosts.add(utilityCost);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewUtilityCost(UtilityCost utilityCost) {
        utilityCosts.add(utilityCost);
        this.setTotalCost(utilityCost.getInternetSpending() + utilityCost.getElectricitySpending());
        return true;
        //return false;
    }

    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addUtilityCost(List<UtilityCost> utilityCosts) {
        boolean added = false;
        for (UtilityCost utilityCost : utilityCosts) {
            if (!this.utilityCosts.contains(utilityCost)) {
                if (!added) added = true;
                this.utilityCosts.add(utilityCost);
            }
        }
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewUtilityCost(List<UtilityCost> utilityCosts) {
        this.utilityCosts.addAll(utilityCosts);
        for (UtilityCost utilityCost : utilityCosts) {
            this.setTotalCost(utilityCost.getInternetSpending() + utilityCost.getElectricitySpending());
        }
        return true;
        //return false;
    }

    @DOpt(type = DOpt.Type.LinkRemover)
    public boolean removeUtilityCost(UtilityCost utilityCost) {
        boolean removed = this.utilityCosts.remove(utilityCost);
        this.totalCost -= (utilityCost.getInternetSpending() + utilityCost.getInternetSpending());
       return true;
       // return false;
    }

    // staff
    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addStaff(Staff staff) {
        if (!salary.contains(staff))
            salary.add(staff);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewStaff(Staff staff) {
        salary.add(staff);
        this.setTotalCost(staff.getSalary());
         return true;
       // return false;
    }

    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addStaff(List<Staff> staffs) {
        boolean added = false;
        for (Staff staff : staffs) {
            if (!this.salary.contains(staff)) {
                if (!added) added = true;
                this.salary.add(staff);
            }
        }
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewStaff(List<Staff> staffs) {
        this.salary.addAll(staffs);
        for (Staff s: salary) {
            this.setTotalCost(s.getSalary());
        }

      //  TODO: update totalCost & totalIncome for each staff s.salary where s in salary
         return true;

    //    return false;
    }

    @DOpt(type = DOpt.Type.LinkRemover)
    public boolean removeStaff(Staff staff) {
        boolean removed = this.salary.remove(staff);
        this.totalCost -= staff.getSalary();
        //TODO: update totalCost & totalIncome from staff.salary
         return true;
       // return false;
    }
}
