package model.equipment;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.*;
import domainapp.basics.util.Tuple;
import model.bill.EquipmentBill;

import java.util.List;

@DClass(schema = "internetCafe")
public abstract class Equipment {
    @DAttr(name = "equipmentId", type = DAttr.Type.String, id = true, auto = true, mutable = false, optional = false, length = 10)
    private String equipmentId;
    private static int idCounter;
    @DAttr(name = "equipmentName", type = DAttr.Type.String, mutable = true, optional = false, length = 30)
    private String equipmentName;
    @DAttr(name = "provider", type = DAttr.Type.String, mutable = true, optional = false, length = 30)
    private String provider;
    @DAttr(name = "cost", type = DAttr.Type.Integer, mutable = true, optional = false, length = 10, min = 0)
    private int cost;
    @DAttr(name = "equipmentBills", type = DAttr.Type.Collection, optional = false,
            serialisable = false, filter = @Select(clazz = EquipmentBill.class))
    @DAssoc(ascName = "equipment-has-equipmentBills", role = "equipment",
            ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.One,
            associate = @DAssoc.Associate(type = EquipmentBill.class, cardMin = 0, cardMax = 25))
    private List<EquipmentBill> equipmentBills;

    public Equipment(String equipmentId, String equipmentName, String provider, Integer cost) {
        this.equipmentId = nextID(equipmentId);
        this.equipmentName = equipmentName;
        this.provider = provider;
        this.cost = cost;
    }

    public Equipment(String equipmentName, String provider, Integer cost) {
        this(null, equipmentName, provider, cost);
    }

    private String nextID(String currId) {
        if (currId == null) {
            idCounter++;
            return "E" + idCounter;
        } else {
            int num = Integer.parseInt(currId.substring(1));
            if (num > idCounter) {
                idCounter = num;
            }
            return currId;
        }
    }

    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue(
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) throws ConstraintViolationException {

        if (minVal != null && maxVal != null) {
            //TODO: update this for the correct attribute if there are more than one auto attributes of this class

            String maxId = (String) maxVal;
            try {
                int maxIdNum = Integer.parseInt(maxId.substring(1));

                if (maxIdNum > idCounter) // extra check
                    idCounter = maxIdNum;

            } catch (RuntimeException e) {
                throw new ConstraintViolationException(
                        ConstraintViolationException.Code.INVALID_VALUE, e, new Object[]{maxId});
            }
        }
    }

    public String getEquipmentId() {
        return equipmentId;
    }

    public String getEquipmentName() {
        return equipmentName;
    }

    public void setEquipmentName(String equipmentName) {
        this.equipmentName = equipmentName;
    }

    public String getProvider() {
        return provider;
    }

    public void setProvider(String provider) {
        this.provider = provider;
    }

    public int getCost() {
        return cost;
    }

    public void setCost(int cost) {
        this.cost = cost;
    }

    public void setEquipmentId(String equipmentId) {
        this.equipmentId = equipmentId;
    }

    public List<EquipmentBill> getEquipmentBills() {
        return equipmentBills;
    }

    public void setEquipmentBills(List<EquipmentBill> equipmentBills) {
        this.equipmentBills = equipmentBills;
    }

    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addEquipmentBill(EquipmentBill equipmentBill) {
        if (!this.equipmentBills.contains(equipmentBill))
            this.equipmentBills.add(equipmentBill);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewEquipmentBill(EquipmentBill equipmentBill) {
        this.equipmentBills.add(equipmentBill);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addEquipmentBill(List<EquipmentBill> equipmentBills) {
        boolean added = false;
        for (EquipmentBill equipmentBill : equipmentBills) {
            if (!this.equipmentBills.contains(equipmentBill)) {
                if (!added) added = true;
                this.equipmentBills.add(equipmentBill);
            }
        }
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewEquipmentBill(List<EquipmentBill> equipmentBills) {
        this.equipmentBills.addAll(equipmentBills);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkRemover)
    public boolean removeEquipmentBill(EquipmentBill equipmentBill) {
        boolean removed = this.equipmentBills.remove(equipmentBill);
        return false;
    }
}
