package model.people;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.*;
import domainapp.basics.util.Tuple;
import model.bill.InternetTimeOrder;
import model.bill.ProductOrder;

import java.util.ArrayList;
import java.util.List;

@DClass(schema = "internetCafe")
public class Customer {
    @DAttr(name = "customerId", id = true, auto = true, type = DAttr.Type.String, length = 10, mutable = false, optional = false)
    private String customerId;
    private static int idCounter = 0;

    @DAttr(name = "userName", type = DAttr.Type.String, length = 30, mutable = true, optional = false)
    private String userName;

    @DAttr(name = "customerPassWord", type = DAttr.Type.String, length = 20, mutable = true, optional = false, min = 0, max = 20)
    private String customerPassWord;

    @DAttr(name = "customerDob", type = DAttr.Type.String, length = 10, mutable = true, optional = false)
    private String customerDob;

    @DAttr(name = "customerAddress", type = DAttr.Type.String, length = 20, mutable = true, optional = false)
    private String customerAddress;

    @DAttr(name = "phoneNumber", type = DAttr.Type.String, length = 11, mutable = true, optional = false)
    private String phoneNumber;

    @DAttr(name = "dateJoin", type = DAttr.Type.String, length = 10, mutable = true, optional = false)
    private String dateJoin;

    @DAttr(name = "customerEmail", type = DAttr.Type.String, length = 30, mutable = true, optional = false)
    private String customerEmail;

    @DAttr(name = "totalInternetTime", type = DAttr.Type.Integer, length = 10, mutable = true, optional = false, min = 0)
    private int totalInternetTime;

    @DAttr(name = "InternetTimeOrders", type = DAttr.Type.Collection, optional = false,
            serialisable = false, filter = @Select(clazz = InternetTimeOrder.class))
    @DAssoc(ascName = "customer-has-internetTimeOrders", role = "customer",
            ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.One,
            associate = @DAssoc.Associate(type = InternetTimeOrder.class, cardMin = 0, cardMax = 25))
    private ArrayList<InternetTimeOrder> InternetTimeOrders;

    @DAttr(name = "productOrders", type = DAttr.Type.Collection, optional = false,
            serialisable = false, filter = @Select(clazz = ProductOrder.class))
    @DAssoc(ascName = "customer-has-productOrders", role = "customer",
            ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.One,
            associate = @DAssoc.Associate(type = ProductOrder.class, cardMin = 0, cardMax = 25))
    private ArrayList<ProductOrder> productOrders;


    public Customer(String userName, String customerPassWord, String customerDob, String customerAddress, String phoneNumber, String dateJoin, String customerEmail) {
        this(null, userName, customerPassWord, customerDob, customerAddress, phoneNumber, dateJoin, customerEmail, 0);
    }

    public Customer(String userName, String customerPassWord, String customerDob, String customerAddress, String phoneNumber, String dateJoin, String customerEmail, Integer totalInternetTime) {
        this(null, userName, customerPassWord, customerDob, customerAddress, phoneNumber, dateJoin, customerEmail, totalInternetTime);
    }

    public Customer(String customerId, String userName, String customerPassWord, String customerDob, String customerAddress, String phoneNumber, String dateJoin, String customerEmail, Integer totalInternetTime) {
        this.customerId = nextID(customerId);
        this.customerPassWord = customerPassWord;
        this.userName = userName;
        this.customerDob = customerDob;
        this.customerAddress = customerAddress;
        this.phoneNumber = phoneNumber;
        this.dateJoin = dateJoin;
        this.customerEmail = customerEmail;
        this.totalInternetTime = totalInternetTime;
    }

    private String nextID(String currId) {
        if (currId == null) {
            idCounter++;
            return "C" + idCounter;
        } else {
            int num = Integer.parseInt(currId.substring(1));
            if (num > idCounter) {
                idCounter = num;
            }
            return currId;
        }
    }

    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue(
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) throws ConstraintViolationException {

        if (minVal != null && maxVal != null) {
            //TODO: update this for the correct attribute if there are more than one auto attributes of this class

            String maxId = (String) maxVal;
            try {
                int maxIdNum = Integer.parseInt(maxId.substring(1));

                if (maxIdNum > idCounter) // extra check
                    idCounter = maxIdNum;

            } catch (RuntimeException e) {
                throw new ConstraintViolationException(
                        ConstraintViolationException.Code.INVALID_VALUE, e, new Object[]{maxId});
            }
        }
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getCustomerPassWord() {
        return customerPassWord;
    }

    public void setCustomerPassWord(String customerPassWord) {
        this.customerPassWord = customerPassWord;
    }

    public String getCustomerDob() {
        return customerDob;
    }

    public void setCustomerDob(String customerDob) {
        this.customerDob = customerDob;
    }

    public String getCustomerAddress() {
        return customerAddress;
    }

    public void setCustomerAddress(String customerAddress) {
        this.customerAddress = customerAddress;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getDateJoin() {
        return dateJoin;
    }

    public void setDateJoin(String dateJoin) {
        this.dateJoin = dateJoin;
    }

    public String getCustomerEmail() {
        return customerEmail;
    }

    public void setCustomerEmail(String customerEmail) {
        this.customerEmail = customerEmail;
    }

    public List<InternetTimeOrder> getInternetTimeOrders() {
        return InternetTimeOrders;
    }

    public int getTotalInternetTime() {
        return totalInternetTime;
    }

    public void setTotalInternetTime(int totalInternetTime) {
        this.totalInternetTime += totalInternetTime;
    }

    public void setInternetTimeOrders(ArrayList<InternetTimeOrder> InternetTimeOrders) {
        this.InternetTimeOrders = InternetTimeOrders;
    }

    public ArrayList<ProductOrder> getProductOrders() {
        return productOrders;
    }

    public void setProductOrders(ArrayList<ProductOrder> productOrders) {
        this.productOrders = productOrders;
    }

    // product bill
    @DOpt(type = DOpt.Type.LinkAdder)
    //only need to do this for reflexive association: @MemberRef(name="enrolments")
    public boolean addProductBill(ProductOrder productOrder) {
        if (!productOrders.contains(productOrder))
            productOrders.add(productOrder);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewProductBill(ProductOrder productOrder) {
        productOrders.add(productOrder);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdder)
    //@MemberRef(name="enrolments")
    public boolean addProductBill(List<ProductOrder> productOrders) {
        boolean added = false;
        for (ProductOrder productOrder : productOrders) {
            if (!this.productOrders.contains(productOrder)) {
                if (!added) added = true;
                this.productOrders.add(productOrder);
            }
        }
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewProductBill(List<ProductOrder> productOrders) {
        this.productOrders.addAll(productOrders);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkRemover)
    public boolean removeProductBill(ProductOrder productOrder) {
        boolean removed = this.productOrders.remove(productOrder);
        return false;
    }

    // time bill
    @DOpt(type = DOpt.Type.LinkAdder)
     public boolean addInternetTimeOrder(InternetTimeOrder InternetTimeOrder) {
        if (!InternetTimeOrders.contains(InternetTimeOrder))
            InternetTimeOrders.add(InternetTimeOrder);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewInternetTimeOrder(InternetTimeOrder InternetTimeOrder) {
        InternetTimeOrders.add(InternetTimeOrder);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addInternetTimeOrder(List<InternetTimeOrder> InternetTimeOrders) {
        boolean added = false;
        for (InternetTimeOrder InternetTimeOrder : InternetTimeOrders) {
            if (!this.InternetTimeOrders.contains(InternetTimeOrder)) {
                if (!added) added = true;
                this.InternetTimeOrders.add(InternetTimeOrder);
            }
        }
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewInternetTimeOrder(List<InternetTimeOrder> InternetTimeOrders) {
        this.InternetTimeOrders.addAll(InternetTimeOrders);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkRemover)
    public boolean removeInternetTimeOrder(InternetTimeOrder InternetTimeOrder) {
        boolean removed = this.InternetTimeOrders.remove(InternetTimeOrder);
        return false;
    }

}
